"use strict"
var mongoose = require('mongoose'),
    code = require('../../../Data/Code.js'),
    msg = require('../../../Data/Message.js'),
    utils = require('../../../Utils/MainUtils.js'),
    UserPointController = require('../../User/Points/PointController.js'),
    Event = mongoose.model('TrafficEvent'),
    User = mongoose.model('User'),
    EventPoint = mongoose.model('TrafficEventPoint'),
    UserPoint = mongoose.model('PointByMonth')
;

exports.createEvent = function (req,res) {
    var body = req.body;
    if(!body.userId){
        return utils.result(res,code.badRequest,msg.userNotFound,null);
    }
    if(!body.name){
        return utils.result(res,code.badRequest,msg.nameNotFound,null)
    }
    if(!body.latitude){
        return utils.result(res,code.badRequest,msg.latitudeNotFound,null);
    }
    if(!body.longitude){
        return utils.result(res,code.badRequest,msg.longitudeNotFound,null);
    }
    if(!body.end_latitude){
        return utils.result(res,code.badRequest,msg.endLatitudeNotFound,null);
    }
    if(!body.end_longitude){
        return utils.result(res,code.badRequest,msg.endLongitudeNotFound,null);
    }
    if(body.eventType && (body.eventType > 4 || body.eventType < 0)){
        return utils.result(res,code.badRequest,msg.invalidEventType,null);
    }
    if(body.density && (body.density < 0 || body.density >4)){
        return utils.result(res,code.badRequest,msg.invalidDensity,null);
    }
    if(body.motorbike_speed && (body.motorbike_speed <0 || body.motorbike_speed > 3)){
        return utils.result(res,code.badRequest,msg.invalidMotorbikeSpeed,null);
    }
    if(body.car_speed && (body.car_speed <0 || body.car_speed > 3)){
        return utils.result(res,code.badRequest,msg.invalidCarSpeed,null);
    }
    var newEvent = Event(body);
    User.findOne({
        _id:body.userId
    },function (err,userExist) {
        if(!userExist){
            return utils.result(res,code.notFound,msg.userNotFound,null);
        }
        if(err){
            console.log(err);
            return utils.result(res, code.serverError, msg.serverError, null);
        }
        newEvent.save(function (err,event) {
            if(err){
                console.log(err);
                return utils.result(res, code.serverError, msg.serverError, null);
            }
            var eventPoint = new EventPoint({
                event_id:event._id
            });
            eventPoint.save(function (err) {
                if(err){
                    console.log(err);
                    return utils.result(res,code.serverError,msg.serverError,null);
                }
                Event.findOneAndUpdate(
                    {_id:event._id},
                    {Point:eventPoint._id},
                    {new:true},
                    function (err) {
                        if(err){
                            console.log(err);
                            return utils.result(res,code.serverError,msg.serverError,null);
                        }
                        return utils.result(res, code.success, msg.success,event);
                    }
                );
            });
        });
    });
};

exports.getAllEvents = function (req,res) {
    Event.find()
        .populate('Point')
        .exec(function (err,results) {
            if(err) {
                console.log('err');
                return utils.result(res, code.serverError, msg.serverError, null);
            }
            return utils.result(res,code.success,msg.success,results);
        })
};

exports.getEventById = function (req,res) {
    Event.findOne({
       _id:req.params.eventId
    }, function (err,eventExist) {
        if(err){
            console.log(err);
            return utils.result(res,code.serverError,msg.serverError,null);
        }
        if(!eventExist){
            return utils.result(res,code.notFound,msg.eventNotFound,null);
        }
    })
        .populate('Point')
        .exec(function (err,result) {
            if (err) {
                console.log(err);
                return utils.result(res,code.serverError,msg.serverError,null);
            }
            return utils.result(res, code.success, msg.success, result);
        })
};

exports.updateEventById = function (req,res) {
    var body = req.body;
    if(req.body._id){
        return utils.result(res,code.badRequest,msg.noUpdateUserId,null);
    }
    if(body.eventType && (body.eventType > 4 || body.eventType < 0)){
        return utils.result(res,code.badRequest,msg.invalidEventType,null);
    }
    if(body.density && (body.density < 0 || body.density >4)){
        return utils.result(res,code.badRequest,msg.invalidDensity,null);
    }
    if(body.motorbike_speed && (body.motorbike_speed <0 || body.motorbike_speed > 3)){
        return utils.result(res,code.badRequest,msg.invalidMotorbikeSpeed,null);
    }
    if(body.car_speed && (body.car_speed <0 || body.car_speed > 3)){
        return utils.result(res,code.badRequest,msg.invalidCarSpeed,null);
    }

    Event.findByIdAndUpdate(req.params.eventId, body,{new: true}, function (err, event) {
        if(!event)
            return utils.result(res, code.notFound, msg.eventNotFound, null);
        if(err)
            return utils.result(res,code.serverError,msg.serverError,null);
        return utils.result(res, code.success, msg.success, event);
    });
};

exports.deleteEvent = function (req,res) {
    Event.findOne({
        _id:req.params.eventId
    }, function (err,eventExist) {
        if(err) {
            return utils.result(res,code.serverError,msg.serverError,null);
        }
        if(eventExist) {
            Event.remove({
                _id:req.params.eventId
            }, function (err, deleted) {
                if(!deleted){
                    return utils.result(res, code.notFound, msg.eventNotFound, null);
                }
                if(err) {
                    return utils.result(res,code.serverError,msg.serverError,null);
                }
                if(deleted){
                    return utils.result(res, code.success, msg.success, null);
                }
            });
        }
        else{
            return utils.result(res, code.notFound, msg.eventNotFound, null);
        }
    });
};
exports.upvote = function(req,res){
    EventPoint.findOneAndUpdate(
        {event_id:req.params.eventId},
        {$inc:{upvotes:1}},
        {new: true},
        function (err,result) {
            if(err) {
                console.log(err);
                return utils.result(res, code.serverError, msg.serverError, null);
            }
            if(!result)
                return utils.result(res,code.notFound,msg.eventNotFound,null);

            if(updateUserPoint(true,result.event_id) == false)
                return utils.result(res,code.serverError,msg.serverError,null);
            return utils.result(res,code.success,msg.success,result);
        }
    );
};
exports.downvote = function(req,res){
    EventPoint.findOneAndUpdate(
        {event_id:req.params.eventId},
        {$inc:{downvotes:1}},
        {new: true},
        function (err,result) {
            if(err) {
                console.log(err);
                return utils.result(res, code.serverError, msg.serverError, null);
            }
            if(!result)
                return utils.result(res,code.notFound,msg.eventNotFound,null);

            if(updateUserPoint(false,result.event_id) == false)
                return utils.result(res,code.serverError,msg.serverError,null);
            return utils.result(res,code.success,msg.success,result);
        }
    );
};
function updateUserPoint(isUpvote,eventId){
    Event.findOne(
        {_id:eventId},
        function (err,event) {
            if(err) {
                console.log(err)
                return false;
            }
            return UserPointController.updatePoint(event.userId,isUpvote)
        }
    );
}